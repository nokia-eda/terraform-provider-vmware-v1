// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_app_group

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func AppGroupDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"api_version": schema.StringAttribute{
				Computed: true,
			},
			"kind": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"preferred_version": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"group_version": schema.StringAttribute{
						Computed: true,
					},
					"version": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: PreferredVersionType{
					ObjectType: types.ObjectType{
						AttrTypes: PreferredVersionValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"versions": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"group_version": schema.StringAttribute{
							Computed: true,
						},
						"version": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: VersionsType{
						ObjectType: types.ObjectType{
							AttrTypes: VersionsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type AppGroupModel struct {
	ApiVersion       types.String          `tfsdk:"api_version"`
	Kind             types.String          `tfsdk:"kind"`
	Name             types.String          `tfsdk:"name"`
	PreferredVersion PreferredVersionValue `tfsdk:"preferred_version"`
	Versions         types.List            `tfsdk:"versions"`
}

var _ basetypes.ObjectTypable = PreferredVersionType{}

type PreferredVersionType struct {
	basetypes.ObjectType
}

func (t PreferredVersionType) Equal(o attr.Type) bool {
	other, ok := o.(PreferredVersionType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PreferredVersionType) String() string {
	return "PreferredVersionType"
}

func (t PreferredVersionType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	groupVersionAttribute, ok := attributes["group_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group_version is missing from object`)

		return nil, diags
	}

	groupVersionVal, ok := groupVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group_version expected to be basetypes.StringValue, was: %T`, groupVersionAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PreferredVersionValue{
		GroupVersion: groupVersionVal,
		Version:      versionVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewPreferredVersionValueNull() PreferredVersionValue {
	return PreferredVersionValue{
		state: attr.ValueStateNull,
	}
}

func NewPreferredVersionValueUnknown() PreferredVersionValue {
	return PreferredVersionValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPreferredVersionValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PreferredVersionValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PreferredVersionValue Attribute Value",
				"While creating a PreferredVersionValue value, a missing attribute value was detected. "+
					"A PreferredVersionValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PreferredVersionValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PreferredVersionValue Attribute Type",
				"While creating a PreferredVersionValue value, an invalid attribute value was detected. "+
					"A PreferredVersionValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PreferredVersionValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PreferredVersionValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PreferredVersionValue Attribute Value",
				"While creating a PreferredVersionValue value, an extra attribute value was detected. "+
					"A PreferredVersionValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PreferredVersionValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPreferredVersionValueUnknown(), diags
	}

	groupVersionAttribute, ok := attributes["group_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group_version is missing from object`)

		return NewPreferredVersionValueUnknown(), diags
	}

	groupVersionVal, ok := groupVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group_version expected to be basetypes.StringValue, was: %T`, groupVersionAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewPreferredVersionValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewPreferredVersionValueUnknown(), diags
	}

	return PreferredVersionValue{
		GroupVersion: groupVersionVal,
		Version:      versionVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewPreferredVersionValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PreferredVersionValue {
	object, diags := NewPreferredVersionValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPreferredVersionValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PreferredVersionType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPreferredVersionValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPreferredVersionValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPreferredVersionValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPreferredVersionValueMust(PreferredVersionValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PreferredVersionType) ValueType(ctx context.Context) attr.Value {
	return PreferredVersionValue{}
}

var _ basetypes.ObjectValuable = PreferredVersionValue{}

type PreferredVersionValue struct {
	GroupVersion basetypes.StringValue `tfsdk:"group_version"`
	Version      basetypes.StringValue `tfsdk:"version"`
	state        attr.ValueState
}

func (v PreferredVersionValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["group_version"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.GroupVersion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group_version"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PreferredVersionValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PreferredVersionValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PreferredVersionValue) String() string {
	return "PreferredVersionValue"
}

func (v PreferredVersionValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"group_version": basetypes.StringType{},
		"version":       basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"group_version": v.GroupVersion,
			"version":       v.Version,
		})

	return objVal, diags
}

func (v PreferredVersionValue) Equal(o attr.Value) bool {
	other, ok := o.(PreferredVersionValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.GroupVersion.Equal(other.GroupVersion) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v PreferredVersionValue) Type(ctx context.Context) attr.Type {
	return PreferredVersionType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PreferredVersionValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"group_version": basetypes.StringType{},
		"version":       basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = VersionsType{}

type VersionsType struct {
	basetypes.ObjectType
}

func (t VersionsType) Equal(o attr.Type) bool {
	other, ok := o.(VersionsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t VersionsType) String() string {
	return "VersionsType"
}

func (t VersionsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	groupVersionAttribute, ok := attributes["group_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group_version is missing from object`)

		return nil, diags
	}

	groupVersionVal, ok := groupVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group_version expected to be basetypes.StringValue, was: %T`, groupVersionAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return VersionsValue{
		GroupVersion: groupVersionVal,
		Version:      versionVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewVersionsValueNull() VersionsValue {
	return VersionsValue{
		state: attr.ValueStateNull,
	}
}

func NewVersionsValueUnknown() VersionsValue {
	return VersionsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewVersionsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (VersionsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing VersionsValue Attribute Value",
				"While creating a VersionsValue value, a missing attribute value was detected. "+
					"A VersionsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VersionsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid VersionsValue Attribute Type",
				"While creating a VersionsValue value, an invalid attribute value was detected. "+
					"A VersionsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VersionsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("VersionsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra VersionsValue Attribute Value",
				"While creating a VersionsValue value, an extra attribute value was detected. "+
					"A VersionsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra VersionsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewVersionsValueUnknown(), diags
	}

	groupVersionAttribute, ok := attributes["group_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group_version is missing from object`)

		return NewVersionsValueUnknown(), diags
	}

	groupVersionVal, ok := groupVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group_version expected to be basetypes.StringValue, was: %T`, groupVersionAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewVersionsValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewVersionsValueUnknown(), diags
	}

	return VersionsValue{
		GroupVersion: groupVersionVal,
		Version:      versionVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewVersionsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) VersionsValue {
	object, diags := NewVersionsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewVersionsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t VersionsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewVersionsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewVersionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewVersionsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewVersionsValueMust(VersionsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t VersionsType) ValueType(ctx context.Context) attr.Value {
	return VersionsValue{}
}

var _ basetypes.ObjectValuable = VersionsValue{}

type VersionsValue struct {
	GroupVersion basetypes.StringValue `tfsdk:"group_version"`
	Version      basetypes.StringValue `tfsdk:"version"`
	state        attr.ValueState
}

func (v VersionsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["group_version"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.GroupVersion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group_version"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v VersionsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v VersionsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v VersionsValue) String() string {
	return "VersionsValue"
}

func (v VersionsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"group_version": basetypes.StringType{},
		"version":       basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"group_version": v.GroupVersion,
			"version":       v.Version,
		})

	return objVal, diags
}

func (v VersionsValue) Equal(o attr.Value) bool {
	other, ok := o.(VersionsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.GroupVersion.Equal(other.GroupVersion) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v VersionsValue) Type(ctx context.Context) attr.Type {
	return VersionsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v VersionsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"group_version": basetypes.StringType{},
		"version":       basetypes.StringType{},
	}
}
